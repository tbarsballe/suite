<project name="geoserver" default="build">
  <import file="../../build/common.xml"/>

  <property name="data.dir" value="../data_dir/target"/>
  <property name="war.dir" value="target/geoserver"/>
  <property name="war.file" value="${war.dir}.war"/>
  <property name="composer.dir" value="target/composer"/>

  <target name="build" depends="init,build-client,build-server" 
    description="Builds project">
  </target>

  <target name="build-client" description="builds client">
    <if>
      <available file="composer/build.xml"/>
      <then>
        <ant antfile="composer/build.xml" useNativeBasedir="true" />
        <mkdir dir="${composer.dir}"/>
        <copy todir="${composer.dir}">
          <fileset dir="composer/build" includes="**/*"/>
          <fileset dir="composer/app" includes="LICENSE.txt"/>
        </copy>
      </then>
    </if>
  </target>

  <target name="build-server" description="builds and installs server">
    <antcall target="mvn">
        <param name="goals" value="install"/>
    </antcall>
    <if>
      <equals arg1="${suite.build_profile}" arg2="ee"/>
      <then>
        <antcall target="mvn">
          <param name="dir" value="ee"/>
          <param name="goals" value="install"/>
        </antcall>
      </then>
    </if>
  </target>

  <target name="clean" depends="destroy">
    <if>
      <available file="composer/build.xml"/>
      <then>
        <ant antfile="composer/build.xml" target="clean" useNativeBasedir="true" />
      </then>
    </if>
  </target>

  <target name="assemble">
    <available file="${data.dir}/global.xml" property="dataDirIsAvailable"/>
    <fail message="Data dir ${data.dir} not present, build ../data_dir first"
      unless="dataDirIsAvailable"/>  

    <mkdir dir="${war.dir}/data"/>
    <copy todir="${war.dir}/data">
      <fileset dir="${data.dir}" excludes="*.zip"/>
    </copy>

    <manifest file="${war.dir}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Specification-Version" value="${suite.version}"/>
      <attribute name="Implementation-Version" value="${suite.version}"/>
    </manifest>

    <delete file="${war.file}"/>
    <if>
        <equals arg1="${suite.build_profile}" arg2="ee"/>
        <then>
          <sequential>
            <copy todir="${war.dir}">
              <fileset dir="target" includes="composer/**/*"/>
            </copy>
            <copy todir="${war.dir}/WEB-INF/lib">
              <fileset dir="ee/target" includes="*.jar"/>
            </copy>
          </sequential>
        </then>
    </if>

    <jar destfile="${war.file}" basedir="${war.dir}" manifest="${war.dir}/META-INF/MANIFEST.MF"/>
    <antcall target="assemble-artifact">
      <param name="includes" value="*.war"/>
    </antcall>

    <!--
    <antcall target="assemble-artifact">
      <param name="name" value="composer"/>
      <param name="includes" value="composer/**/*"/>
    </antcall>
    -->
  </target>

  <target name="publish">
    <antcall target="publish-artifact"/>
    <!--antcall target="publish-artifact">
      <param name="name" value="composer"/>
      <param name="path" value="composer"/>
    </antcall-->
  </target>

  <target name="serve" description="Runs GeoServer">
    <antcall target="mvn">
      <param name="goals" value="dependency:copy-dependencies"/>
    </antcall>
    <condition property="jetty.port" value="${jetty.port}" else="8080">
      <isset property="jetty.port"/>
    </condition>
    <condition property="geoserver.data_dir" value="${GEOSERVER_DATA_DIR}"
      else="data">
      <isset property="GEOSERVER_DATA_DIR"/>
    </condition>
    <java classname="org.geoserver.test.Start" fork="true">
      <sysproperty key="jetty.port" value="${jetty.port}"/>
      <sysproperty key="GEOSERVER_DATA_DIR" value="${geoserver.data_dir}"/>
      <classpath>
        <pathelement path="target/classes"/>
        <pathelement path="target/test-classes"/>
        <fileset dir="target/dependency" includes="*.jar"/>
      </classpath>
    </java>
  </target>

</project>
